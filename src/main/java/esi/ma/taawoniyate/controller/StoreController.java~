package esi.ma.taawoniyate.controller;

import esi.ma.taawoniyate.model.Category;
import esi.ma.taawoniyate.model.Product;
import esi.ma.taawoniyate.model.Seller;
import esi.ma.taawoniyate.repository.CategoryRepository;
import esi.ma.taawoniyate.repository.ProductRepository;
import esi.ma.taawoniyate.repository.SellerRepository;
import esi.ma.taawoniyate.service.SellerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@CrossOrigin(origins = "http://localhost:8085", allowCredentials = "true")
@RestController
@RequestMapping("/store")
public class StoreController {

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private SellerRepository sellerRepository;

    @Autowired
    private SellerService sellerService;

    // Get all products
    @GetMapping("/products")
    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }

    // Get all categories
    @GetMapping("/categories")
    public List<String> getAllCategories() {
        List<String> categories = new ArrayList<>();
        categoryRepository.findAll().forEach(category -> categories.add(category.getName()));
        return categories;
    }

    // Get products by category name
    @GetMapping("/products/category/{name}")
    public List<Product> getProductsByCategoryName(@PathVariable String name) {
        return productRepository.findByCategoryName(name);
    }

    // Get products by name (exact match)
    @GetMapping("/products/name/{name}")
    public List<Product> getProductsByName(@PathVariable String name) {
        return productRepository.findByName(name);
    }

    // Get products by partial name (e.g., search)
    @GetMapping("/products/search")
    public List<Product> searchProductsByName(@RequestParam String keyword) {
        return productRepository.findByNameContainingIgnoreCase(keyword);
    }

    // Get a specific category by name
    @GetMapping("/category/{name}")
    public Category getCategoryByName(@PathVariable String name) {
        return categoryRepository.findByName(name);
    }

    @PostMapping("/addProduct")
    public ResponseEntity<Map<String, Object>> addProduct(@RequestBody ProductRequest productRequest, jakarta.servlet.http.HttpSession session) {
        Map<String, Object> response = new HashMap<>();

        // Log the request
        System.out.println("Adding product with name: " + productRequest.getName());

        // Get the current seller from the session
        Seller currentSeller = (Seller) session.getAttribute("user");
        if (currentSeller == null) {
            response.put("success", false);
            response.put("message", "Seller not logged in");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
        }

        // Validate the seller exists in the database
        Seller seller = sellerRepository.findById(currentSeller.getId()).orElse(null);
        if (seller == null) {
            response.put("success", false);
            response.put("message", "Seller not found in database");
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
        }

        // Validate required fields
        if (productRequest.getName() == null || productRequest.getName().trim().isEmpty()) {
            response.put("success", false);
            response.put("message", "Product name cannot be null or empty");
            return ResponseEntity.badRequest().body(response);
        }
        if (productRequest.getCategoryName() == null || productRequest.getCategoryName().trim().isEmpty()) {
            response.put("success", false);
            response.put("message", "Category name is required");
            return ResponseEntity.badRequest().body(response);
        }
        if (productRequest.getPrice() == null || productRequest.getPrice() <= 0) {
            response.put("success", false);
            response.put("message", "Price must be a positive number");
            return ResponseEntity.badRequest().body(response);
        }

        // Verify category exists
        Category category = categoryRepository.findByName(productRequest.getCategoryName());
        if (category == null) {
            response.put("success", false);
            response.put("message", "Category not found with name: " + productRequest.getCategoryName());
            return ResponseEntity.badRequest().body(response);
        }

        try {
            // Create a new Product entity
            Product product = new Product();
            product.setName(productRequest.getName());
            product.setCategory(category);
            product.setSeller(seller);
            product.setPrice(productRequest.getPrice());
            product.setDescription(productRequest.getDescription());

            // Save the product
            Product savedProduct = productRepository.save(product);

            response.put("success", true);
            response.put("message", "Product added successfully");
            response.put("product", savedProduct);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            e.printStackTrace();
            response.put("success", false);
            response.put("message", "Failed to add product: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @PostMapping("/addCategory")
    public ResponseEntity<?> createCategory(@RequestBody Category category) {
        if (category.getName() == null || category.getName().trim().isEmpty()) {
            return ResponseEntity.badRequest().body("Category name cannot be null or empty.");
        }

        Category saved = categoryRepository.save(category);
        return ResponseEntity.ok(saved);
    }

    @DeleteMapping("/deleteProductByName/{name}")
    public ResponseEntity<?> deleteProductByName(@PathVariable String name) {
        List<Product> products = productRepository.findByName(name);
        if (products.isEmpty()) {
            return ResponseEntity.status(404).body("No product found with name: " + name);
        }

        productRepository.deleteAll(products);
        return ResponseEntity.ok("Deleted " + products.size() + " product(s) named: " + name);
    }

    @DeleteMapping("/deleteCategoryByName/{name}")
    public ResponseEntity<?> deleteCategoryByName(@PathVariable String name) {
        Category category = categoryRepository.findByName(name);
        if (category == null) {
            return ResponseEntity.status(404).body("No category found with name: " + name);
        }

        categoryRepository.delete(category);
        return ResponseEntity.ok("Deleted category named: " + name);
    }

    @GetMapping("/{busnissName}/products")
    public List<Product> getBusnissNameProducts(@PathVariable String busnissName) {
        List<Product> products = sellerService.getProductsByBusinessName(busnissName);
        return products;
    }
}

// DTO class to handle the incoming product request
class ProductRequest {
    private String name;
    private String categoryName;
    private Double price;
    private String description;

    // Getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }
}